{
	"info": {
		"_postman_id": "f499c70a-d465-41ae-96de-c78cdb6d6b5c",
		"name": "Techpubs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Admin Common Controller",
					"item": [
						{
							"name": "Admin Ping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/ping",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"ping"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Engine Models Controller",
					"item": [
						{
							"name": "Engine Models Bookcase Keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.bookcaseKeys).to.be.an(\"array\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/engine-models/GENX-2B/bookcase-keys",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"engine-models",
										"GENX-2B",
										"bookcase-keys"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Companies Controller",
					"item": [
						{
							"name": "Companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.content).to.be.an(\"array\");",
											"  pm.expect(jsonData.content[0].company).to.be.a(\"string\");",
											" });",
											"",
											"",
											"pm.test(\"Response Value\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson.content[0].company).to.eql(\" test\");",
											"  pm.expect(responseJson.content[0].icaoCode).to.eql(\"\");",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/companies",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"companies"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "sortBy",
											"value": "company%7Casc",
											"disabled": true
										},
										{
											"key": "searchTerm",
											"value": "DAL",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Companies Download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response file type test\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".xlsx\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/companies/download",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"companies",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Companies {Company} MDM Engine Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const vals = Object.values(jsonData.companyMdmEngineModels);",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.companyMdmEngineModels).to.be.an(\"object\");",
											"  pm.expect(vals[0]).to.be.an(\"object\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/companies/delta%20air%20lines/mdm-engine-models",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"companies",
										"delta%20air%20lines",
										"mdm-engine-models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Companies {ICAO Code} Engine Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"array\");",
											"  pm.expect(jsonData[0]).to.be.an(\"object\");",
											"  pm.expect(jsonData[0].icaoCode).to.be.a(\"string\");",
											"  pm.expect(jsonData[0].engineModel).to.be.a(\"string\");",
											"  pm.expect(jsonData[0].previouslyEnabled).to.be.a(\"boolean\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/companies/ACA/engine-models",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"companies",
										"ACA",
										"engine-models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Companies {ICAO Code} Engine Models {engineModel} Books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"array\");",
											"  pm.expect(jsonData[0]).to.be.an(\"object\");",
											"  pm.expect(jsonData[0].id).to.be.a(\"string\");",
											"  pm.expect(jsonData[0].bookKey).to.be.a(\"string\");",
											"  pm.expect(jsonData[0].bookType).to.be.a(\"string\");",
											"  pm.expect(jsonData[0].previouslyEnabled).to.be.a(\"boolean\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/companies/ACA/engine-models/CF34-10E/books",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"companies",
										"ACA",
										"engine-models",
										"CF34-10E",
										"books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Companies {ICAO Code} Engine Models {engineModel} Technology Level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"array\");",
											"  pm.expect(jsonData[0]).to.be.an(\"object\");",
											"  pm.expect(jsonData[0].boocaseKey).to.be.an(\"string\");",
											"  pm.expect(jsonData[0].techLevels).to.be.an(\"array\");",
											"  pm.expect(jsonData[0].techLevels[0].id).to.be.a(\"string\");",
											"  pm.expect(jsonData[0].techLevels[0].levelName).to.be.a(\"string\");",
											"  pm.expect(jsonData[0].techLevels[0].previouslyEnabled).to.be.a(\"boolean\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/companies/DAL/engine-models/CF34-10/technology-level",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"companies",
										"DAL",
										"engine-models",
										"CF34-10",
										"technology-level"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Publisher Controller",
					"item": [
						{
							"name": "Authorization Controller",
							"item": [
								{
									"name": "Authorization Permissions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Test data type of the response\", () => {",
													"  pm.expect(jsonData).to.be.an(\"object\");",
													"  pm.expect(jsonData.permissions).to.be.an(\"array\");",
													"  pm.expect(jsonData.permissions[0]).to.be.an(\"object\");",
													"  pm.expect(jsonData.permissions[0].resource).to.be.a(\"string\");",
													"  pm.expect(jsonData.permissions[0].action).to.be.a(\"string\");",
													"  pm.expect(jsonData.permissions[0].type).to.be.a(\"string\");",
													"  pm.expect(jsonData.permissions[0].product).to.be.a(\"string\");",
													" });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "sm_ssoid",
												"type": "text",
												"value": "{{sm_ssoid}}"
											},
											{
												"key": "portal_id",
												"type": "text",
												"value": "{{portal_id}}"
											}
										],
										"url": {
											"raw": "{{host}}/services/techpubs/admin/authorization/permissions",
											"host": [
												"{{host}}"
											],
											"path": [
												"services",
												"techpubs",
												"admin",
												"authorization",
												"permissions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Authorization Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Test data type of the response\", () => {",
													"  pm.expect(jsonData).to.be.an(\"object\");",
													"  pm.expect(jsonData.roles).to.be.an(\"array\");",
													"  pm.expect(jsonData.roles[0]).to.be.an(\"object\");",
													"  pm.expect(jsonData.roles[0].role).to.be.a(\"string\");",
													"  pm.expect(jsonData.roles[0].policy).to.be.an(\"object\");",
													"  pm.expect(jsonData.roles[0].policy.technologyLevels).to.be.an(\"array\");",
													"  pm.expect(jsonData.roles[0].policy.technologyLevels[0]).to.be.a(\"string\");",
													"  pm.expect(jsonData.roles[0].attributes).to.be.an(\"object\");",
													"  pm.expect(jsonData.roles[0].attributes.engineModels).to.be.an(\"array\");",
													"  pm.expect(jsonData.roles[0].attributes.airFrames).to.be.an(\"array\");",
													"  pm.expect(jsonData.roles[0].attributes.docTypes).to.be.an(\"array\");",
													" });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "sm_ssoid",
												"type": "text",
												"value": "{{sm_ssoid}}"
											},
											{
												"key": "portal_id",
												"type": "text",
												"value": "{{portal_id}}"
											}
										],
										"url": {
											"raw": "{{host}}/services/techpubs/admin/authorization/roles",
											"host": [
												"{{host}}"
											],
											"path": [
												"services",
												"techpubs",
												"admin",
												"authorization",
												"roles"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Publisher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test data type of the response\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"  pm.expect(responseJson.bookcases).to.be.an(\"array\");",
											"  pm.expect(responseJson.bookcases[0].bookcaseTitle).to.be.a(\"string\");",
											"  pm.expect(responseJson.bookcases[0].bookcaseKey).to.be.a(\"string\");",
											"  pm.expect(responseJson.bookcases[0].engineFamily).to.be.a(\"string\");",
											"  pm.expect(responseJson.bookcases[0].onlineVersion).to.be.a(\"string\");",
											"  pm.expect(responseJson.bookcases[0].sendEmail).to.be.a(\"boolean\");",
											"  pm.expect(responseJson.bookcases[0].lastEmailSentDate).to.be.a(\"string\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/publisher?sortBy=bookcaseKey%7Casc",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"publisher"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "bookcaseKey%7Casc"
										},
										{
											"key": "searchTerm",
											"value": "DAL",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publisher Download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response file type test\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".xlsx\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/publisher/download",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"publisher",
										"download"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "DAL",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publisher Bookcase {Bookcase Key} Engine Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.engineModels).to.be.an(\"array\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/publisher/bookcase/gek114118_lr/engine-models",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"publisher",
										"bookcase",
										"gek114118_lr",
										"engine-models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Publisher Bookcase {Bookcase Key} Versions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.bookcaseVersions).to.be.an(\"array\");",
											"  pm.expect(jsonData.bookcaseVersions[0]).to.be.an(\"object\")",
											"  pm.expect(jsonData.bookcaseVersions[0].bookcaseVersion).to.be.a(\"string\")",
											"  pm.expect(jsonData.bookcaseVersions[0].bookcaseVersionStatus).to.be.a(\"string\")",
											"  pm.expect(jsonData.bookcaseVersions[0].releaseDate).to.be.a(\"string\")",
											" });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/publisher/bookcase/gek114118_lr/versions",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"publisher",
										"bookcase",
										"gek114118_lr",
										"versions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Publisher Bookcase {Bookcase Key} Versions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () { ",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bookcaseVersions\": [\n        {\n            \"version\": \"8.9\",\n            \"releaseDate\": \"2018-08-01\",\n            \"status\": \"archived\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/services/techpubs/admin/publisher/bookcase/gek114118_lr/versions",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"publisher",
										"bookcase",
										"gek114118_lr",
										"versions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin Management Controller",
					"item": [
						{
							"name": "Admin Management Users Engine Manuals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.content).to.be.an(\"array\");",
											"  pm.expect(jsonData.content[0]).to.be.an(\"object\");",
											"  pm.expect(jsonData.content[0].sso).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].firstName).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].lastName).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].company).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].email).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].roles).to.be.an(\"array\");",
											"  pm.expect(jsonData.content[0].roles[0]).to.be.a(\"string\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users?product=enginemanuals",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users"
									],
									"query": [
										{
											"key": "product",
											"value": "enginemanuals",
											"description": "enginemanuals OR avsystems"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Management Users Avsystems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.content).to.be.an(\"array\");",
											"  pm.expect(jsonData.content[0]).to.be.an(\"object\");",
											"  pm.expect(jsonData.content[0].sso).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].firstName).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].lastName).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].company).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].email).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].roles).to.be.an(\"array\");",
											"  pm.expect(jsonData.content[0].roles[0]).to.be.a(\"string\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users?product=avsystems",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users"
									],
									"query": [
										{
											"key": "product",
											"value": "avsystems"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Management Users Engine Manuals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () { ",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									},
									{
										"key": "X-XSRF-TOKEN",
										"type": "text",
										"value": "8d2b26e9-06ee-42fa-b792-6b06c6a01063",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ssoIds\": [\n        \"502825854\"\n    ],\n    \"roles\": [\n        \"provisioner\"\n    ],\n    \"attributes\": {\n        \"engineModels\": [\n            \"GENX-1B\",\n            \"GENX-2B\"\n        ],\n        \"airFrames\": [],\n        \"docTypes\": []\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users?product=enginemanuals",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users"
									],
									"query": [
										{
											"key": "product",
											"value": "enginemanuals"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Management Users Avsystems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () { ",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									},
									{
										"key": "X-XSRF-TOKEN",
										"type": "text",
										"value": "8d2b26e9-06ee-42fa-b792-6b06c6a01063",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ssoIds\": [\n        \"502825854\"\n    ],\n    \"roles\": [\n        \"avsystems-provisioner\"\n    ],\n    \"attributes\": {\n        \"engineModels\": [\n            \"GENX-1B\",\n            \"GENX-2B\"\n        ],\n        \"airFrames\": [],\n        \"docTypes\": []\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users?product=avsystems",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users"
									],
									"query": [
										{
											"key": "product",
											"value": "avsystems"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Management Users Download Avsystems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response file type test\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".xlsx\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users/download?product=avsystems",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users",
										"download"
									],
									"query": [
										{
											"key": "product",
											"value": "avsystems"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Management Users Download Engine Manuals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response file type test\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".xlsx\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users/download?product=enginemanuals",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users",
										"download"
									],
									"query": [
										{
											"key": "product",
											"value": "enginemanuals"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Management Users {SSO ID}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.ssoId).to.be.a(\"string\");",
											"  pm.expect(jsonData.firstName).to.be.a(\"string\");",
											"  pm.expect(jsonData.lastName).to.be.a(\"string\");",
											"  pm.expect(jsonData.company).to.be.a(\"string\");",
											"  pm.expect(jsonData.email).to.be.a(\"string\");",
											" });",
											"",
											" pm.test(\"Response Value\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson.ssoId).to.eql(\"502825854\");",
											"  pm.expect(responseJson.firstName).to.eql(\"Service\");",
											"  pm.expect(responseJson.lastName).to.eql(\"tpsearc\");",
											"  pm.expect(responseJson.company).to.eql(\"geae\");",
											"  pm.expect(responseJson.email).to.eql(\"Service.tpsearc@ge.com\");",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users/502825854",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users",
										"502825854"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Management Users {SSO ID} Download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content file type\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".xlsx\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users/502825854/download?product=enginemanuals",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users",
										"502825854",
										"download"
									],
									"query": [
										{
											"key": "product",
											"value": "enginemanuals",
											"description": "avsystems or enginemanuals"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Mangement Users {SSO ID} Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.roles).to.be.an(\"array\");",
											"  pm.expect(jsonData.roles[0]).to.be.an(\"object\");",
											"  pm.expect(jsonData.roles[0].policy).to.be.an(\"object\");",
											"  pm.expect(jsonData.roles[0].policy.technologyLevels).to.be.an(\"array\");",
											"  pm.expect(jsonData.roles[0].attributes).to.be.an(\"object\");",
											"  pm.expect(jsonData.roles[0].attributes).to.be.an(\"object\");",
											"  pm.expect(jsonData.roles[0].attributes.engineModels).to.be.an(\"array\");",
											"  pm.expect(jsonData.roles[0].attributes.airFrames).to.be.an(\"array\");",
											"  pm.expect(jsonData.roles[0].attributes.docTypes).to.be.an(\"array\");",
											" });",
											"",
											"",
											"pm.test(\"Role data\", function () {",
											"    let jsonData = pm.response.json()",
											"    // console.log(jsonData.roles)",
											"    pm.expect(jsonData.roles).to.be.an(\"array\");",
											"    pm.expect(jsonData.roles[0].role).to.eql(\"avsystems-superuser\");",
											"    // console.log(typeof jsonData.roles[0].policy.technologyLevels[0]);",
											"    pm.expect(jsonData.roles[0].policy.technologyLevels[0]).to.eql(\"M\");",
											"    pm.expect(jsonData.roles[0].policy.technologyLevels[1]).to.eql(\"0\");",
											"    pm.expect(jsonData.roles[0].policy.technologyLevels[2]).to.eql(\"1\");",
											"    pm.expect(jsonData.roles[0].policy.technologyLevels[3]).to.eql(\"2\");",
											"    pm.expect(jsonData.roles[0].policy.technologyLevels[4]).to.eql(\"3\");",
											"    pm.expect(jsonData.roles[0].policy.technologyLevels[5]).to.eql(\"4\");",
											"    pm.expect(jsonData.roles[0].policy.technologyLevels[6]).to.eql(\"5\");",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users/502825854/roles?product=avsystems",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users",
										"502825854",
										"roles"
									],
									"query": [
										{
											"key": "product",
											"value": "avsystems",
											"description": "avsystems OR enginemanuals"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Mangement Users {SSO ID} Roles {Role}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status test\", function () {",
											"//     pm.response.to.have.status(200);",
											"// });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\" Not;A Brand\";v=\"99\", \"Google Chrome\";v=\"91\", \"Chromium\";v=\"91\"",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*",
										"type": "text"
									},
									{
										"key": "X-XSRF-TOKEN",
										"value": "51d83d8e-0c54-4326-9023-9bf1ce01a901",
										"type": "text"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0",
										"type": "text"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36",
										"type": "text"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin",
										"type": "text"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors",
										"type": "text"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty",
										"type": "text"
									},
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"newRole\": \"provisioner\",\n    \"attributes\": {\n        \"engineModels\": [\n            \"LEAP-1A\",\n            \"LEAP-1B\",\n            \"LEAP-1B-FLTEST\",\n            \"LEAP-1C\",\n            \"LEAP-1C-FLTEST\",\n            \"CT58-100\",\n            \"CT58-110\",\n            \"CT58-140\"\n        ],\n        \"airFrames\": [],\n        \"docTypes\": []\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users/212451521/roles/provisioner?product=enginemanuals",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users",
										"212451521",
										"roles",
										"provisioner"
									],
									"query": [
										{
											"key": "product",
											"value": "enginemanuals"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Mangement Users {SSO ID} Roles {Role} By Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status test\", function () {",
											"//     pm.response.to.have.status(200);",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "sec-ch-ua",
										"value": "\" Not;A Brand\";v=\"99\", \"Google Chrome\";v=\"91\", \"Chromium\";v=\"91\"",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*",
										"type": "text"
									},
									{
										"key": "X-XSRF-TOKEN",
										"value": "51d83d8e-0c54-4326-9023-9bf1ce01a901",
										"type": "text"
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0",
										"type": "text"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36",
										"type": "text"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin",
										"type": "text"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors",
										"type": "text"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty",
										"type": "text"
									},
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"newRole\": \"uploader\",\n    \"attributes\": {\n        \"engineModels\": [\n            \"LEAP-1A\",\n            \"LEAP-1B\",\n            \"LEAP-1B-FLTEST\",\n            \"LEAP-1C\",\n            \"LEAP-1C-FLTEST\",\n            \"CT58-100\",\n            \"CT58-110\",\n            \"CT58-140\"\n        ],\n        \"airFrames\": [],\n        \"docTypes\": []\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users/212451521/roles/uploader?product=avsystems",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users",
										"212451521",
										"roles",
										"uploader"
									],
									"query": [
										{
											"key": "product",
											"value": "avsystems"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Mangement Users {SSO ID} Roles {Role}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () { ",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									},
									{
										"key": "X-XSRF-TOKEN",
										"value": "8d2b26e9-06ee-42fa-b792-6b06c6a01063",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users/212451521/roles/reviewer?product=enginemanuals",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users",
										"212451521",
										"roles",
										"reviewer"
									],
									"query": [
										{
											"key": "product",
											"value": "enginemanuals"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Mangement Users {SSO ID} Roles {Role} By Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									},
									{
										"key": "X-XSRF-TOKEN",
										"value": "8d2b26e9-06ee-42fa-b792-6b06c6a01063",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/users/212716419/roles/avsystems-superuser?product=avsystems",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"users",
										"212716419",
										"roles",
										"avsystems-superuser"
									],
									"query": [
										{
											"key": "product",
											"value": "avsystems"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Mangement Portal Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.content).to.be.an(\"array\");",
											"  pm.expect(jsonData.content[0]).to.be.an(\"object\");",
											"  pm.expect(jsonData.content[0].ssoId).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].firstName).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].lastName).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].company).to.be.a(\"string\");",
											"  pm.expect(jsonData.content[0].email).to.be.a(\"string\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/portal-users?sortBy=sso%7Casc&searchTerm=212",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"portal-users"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "sso%7Casc"
										},
										{
											"key": "searchTerm",
											"value": "212"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Management Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// let technologyLevels = [];",
											"const jsonData = pm.response.json();",
											"// let resultCount = jsonData.roles.length;",
											"// Loop through and set arrays with matching data",
											"// for (i = 0; i < resultCount; i++) {",
											"//   let roleName =jsonData.roles[i].name;",
											"//   if(roleName == \"superuser\"){",
											"//     technologyLevels= jsonData.roles[i].policy.technologyLevels;",
											"//   }",
											"// }",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.roles).to.be.an(\"array\");",
											"  pm.expect(jsonData.roles[0].name).to.be.an(\"string\")",
											"  pm.expect(jsonData.roles[0].label).to.be.an(\"string\")",
											"  pm.expect(jsonData.roles[0].description).to.be.an(\"string\")",
											"  pm.expect(jsonData.roles[0].policy).to.be.an(\"object\")",
											"  pm.expect(jsonData.roles[0].policy.technologyLevels).to.be.an(\"array\")",
											"  pm.expect(jsonData.roles[0].policy.technologyLevels[0]).to.be.an(\"string\")",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/roles",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Management MDM Engine Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const keys = Object.keys(jsonData);",
											"",
											" pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(keys).to.be.an(\"array\");",
											"  pm.expect(keys[0]).to.be.a(\"string\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/mdm-engine-models",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"mdm-engine-models"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Management Product Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.roles).to.be.an(\"array\");",
											"  pm.expect(jsonData.roles[0].label).to.be.an(\"string\");",
											"  pm.expect(jsonData.roles[0].role).to.be.an(\"string\");",
											"  pm.expect(jsonData.roles[0].description).to.be.an(\"string\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/product/roles?product=avsystems",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"product",
										"roles"
									],
									"query": [
										{
											"key": "product",
											"value": "avsystems"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Management Entitled Engine Models",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const keys = Object.keys(jsonData);",
											"",
											" pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(keys).to.be.an(\"array\");",
											"  pm.expect(keys[0]).to.be.a(\"string\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/admin-management/entitled-engine-models?resource=uploader",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"admin-management",
										"entitled-engine-models"
									],
									"query": [
										{
											"key": "resource",
											"value": "uploader"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Av System Controller",
					"item": [
						{
							"name": "Uploader System Document Sites",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"    pm.expect(jsonData).to.be.an(\"array\");",
											"    pm.expect(jsonData.length).to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"Test response array objects have correct object keys\", () => {",
											"    for (const val of jsonData) {",
											"        pm.expect(val.hasOwnProperty(\"id\")).to.be.true;",
											"        pm.expect(val.hasOwnProperty(\"value\")).to.be.true;",
											"    }",
											"});",
											"",
											"pm.test(\"Test response array objects have non-null values\", () => {",
											"    for (const val of jsonData) {",
											"        pm.expect(val.id).to.not.be.null.and.empty;",
											"        pm.expect(val.value).to.not.be.null.and.empty;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/system-document-sites",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"system-document-sites"
									]
								}
							},
							"response": []
						},
						{
							"name": "Uploader System Document Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () { ",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"    pm.expect(jsonData).to.be.an(\"array\");",
											"    pm.expect(jsonData.length).to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"Test response array objects have correct object keys\", () => {",
											"    for (const val of jsonData) {",
											"        pm.expect(val.hasOwnProperty(\"id\")).to.be.true;",
											"        pm.expect(val.hasOwnProperty(\"value\")).to.be.true;",
											"    }",
											"});",
											"",
											"pm.test(\"Test response array objects have non-null values\", () => {",
											"    for (const val of jsonData) {",
											"        pm.expect(val.id).to.not.be.null.and.empty;",
											"        pm.expect(val.value).to.not.be.null.and.empty;",
											"    }",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "{{portal_id}}"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/system-document-types",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"system-document-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Entitlements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the response\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.content).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.pageable).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.last).to.be.an(\"boolean\");\r",
											"    pm.expect(jsonData.totalPages).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.totalElements).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.sort).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.first).to.be.an(\"boolean\");\r",
											"    pm.expect(jsonData.numberOfElements).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.size).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.number).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.empty).to.be.an(\"boolean\");\r",
											"});\r",
											"\r",
											"pm.test(\"Test content array\", () => {\r",
											"    pm.expect(jsonData.content[0].airframe).to.be.an(\"string\");\r",
											"    pm.expect(jsonData.content[0].publicationAccessLevel).to.be.an(\"string\");\r",
											"    pm.expect(jsonData.content[0].publicationAccessLevelId).to.be.an(\"string\");\r",
											"    pm.expect(jsonData.content[0].entitlementStatus).to.be.an(\"string\");\r",
											"    pm.expect(jsonData.content[0].startDate).to.be.an(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/companies/DAL/entitlements?page=0&size=10&sortBy=airframe%7Casc",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"companies",
										"DAL",
										"entitlements"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "optional"
										},
										{
											"key": "size",
											"value": "10",
											"description": "optional"
										},
										{
											"key": "sortBy",
											"value": "airframe%7Casc",
											"description": "optional"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"\r",
											"pm.expect(pm.response.code).to.be.oneOf([200,404]);\r",
											"\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the response\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Test response array objects have correct object keys\", () => {\r",
											"    for (const val of jsonData) {\r",
											"        pm.expect(val.hasOwnProperty(\"id\")).to.be.true;\r",
											"        pm.expect(val.hasOwnProperty(\"companyName\")).to.be.true;\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/companies?airframe=30988f79-a668-4096-9e85-e06662278072&entitlementType=Tier 1&entitlementType=Tier 2",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"companies"
									],
									"query": [
										{
											"key": "airframe",
											"value": "30988f79-a668-4096-9e85-e06662278072"
										},
										{
											"key": "entitlementType",
											"value": "Tier 1"
										},
										{
											"key": "entitlementType",
											"value": "Tier 2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Documents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"systemDocumentId\", jsonData.content[0].systemDocumentId);\r",
											"pm.collectionVariables.set(\"documentTypeId\", jsonData.content[0].documentTypeId);\r",
											"pm.collectionVariables.set(\"documentSiteId\", jsonData.content[0].documentSiteId);\r",
											"pm.collectionVariables.set(\"documentNumber\", jsonData.content[0].documentNumber);\r",
											"\r",
											"\r",
											"pm.test(\"Test data type of the response\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.content).to.be.a(\"array\");\r",
											"  if(jsonData.content.size > 0){\r",
											"        pm.expect(jsonData.content[0]).to.be.a(\"object\");\r",
											"        pm.expect(jsonData.content[0].systemDocumentId).to.be.a(\"string\");\r",
											"        pm.expect(jsonData.content[0].documentType).to.be.a(\"string\");\r",
											"        pm.expect(jsonData.content[0].documentTypeId).to.be.a(\"string\");\r",
											"        pm.expect(jsonData.content[0].documentNumber).to.be.a(\"string\");\r",
											"        pm.expect(jsonData.content[0].documentSite).to.be.a(\"string\");\r",
											"        pm.expect(jsonData.content[0].documentSiteId).to.be.a(\"string\");\r",
											"        pm.expect(jsonData.content[0].documentTitle).to.be.a(\"string\");\r",
											"        pm.expect(jsonData.content[0].documentRevision).to.be.a(\"string\");\r",
											"        pm.expect(jsonData.content[0].documentDistributionDate).to.be.a(\"string\");\r",
											"  }\r",
											"  pm.expect(jsonData.pageable).to.be.a(\"object\");\r",
											"  pm.expect(jsonData.pageable.sort).to.be.a(\"object\");\r",
											"  pm.expect(jsonData.pageable.sort.sorted).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.pageable.sort.unsorted).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.pageable.sort.empty).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.last).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.totalElements).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.sort).to.be.a(\"object\");\r",
											"  pm.expect(jsonData.first).to.be.a(\"boolean\");\r",
											"  pm.expect(jsonData.numberOfElements).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.size).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.empty).to.be.a(\"boolean\");\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "SM_SSOID",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "CWC",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/system-documents?page=0&size=10&sortBy=documentType",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"system-documents"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "part1111",
											"description": "Right now - only part numbers are accepted as a searchTerm. Optional.",
											"disabled": true
										},
										{
											"key": "documentType",
											"value": "4386bfb4-6fe8-42e6-b51f-66b2f1a595ae",
											"description": "Document Type ID. Optional.",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"description": "Required."
										},
										{
											"key": "size",
											"value": "10",
											"description": "Required."
										},
										{
											"key": "sortBy",
											"value": "documentType",
											"description": "Required - can be any of the returned fields except systemDocumentId."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SalesforceCompanyLookup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () { ",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 401, 400]);",
											"});",
											"",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"    pm.expect(jsonData).to.be.an(\"array\");",
											"});",
											"",
											"",
											"pm.test(\"Test response array objects have correct object keys\", () => {",
											"    for (const val of jsonData) {",
											"        pm.expect(val.hasOwnProperty(\"id\")).to.be.true;",
											"        pm.expect(val.hasOwnProperty(\"salesforceId\")).to.be.true;",
											"        pm.expect(val.hasOwnProperty(\"companyName\")).to.be.true;",
											"        pm.expect(val.hasOwnProperty(\"icaoCode\")).to.be.true;",
											"        pm.expect(val.hasOwnProperty(\"dunsNumber\")).to.be.true;",
											"        pm.expect(val.hasOwnProperty(\"lastUpdateDate\")).to.be.true;",
											"        pm.expect(val.hasOwnProperty(\"enabled\")).to.be.true;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"type": "text",
										"value": "{{sm_ssoid}}"
									},
									{
										"key": "portal_id",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/companies/DAL",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"companies",
										"DAL"
									],
									"query": [
										{
											"key": "icao",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Companies Salesforce Enablement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"\r",
											"pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"companyIds\": [\"4c02e304-bc8b-43f8-b46e-d79a6f731a64\",\"75b181a8-c6f6-41c1-b6ec-d0e2af210e45\"],\r\n    \"enabled\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/companies/salesforce/enablement",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"companies",
										"salesforce",
										"enablement"
									]
								}
							},
							"response": []
						},
						{
							"name": "Document Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the response\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"boolean\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "SM_SSOID",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "CWC",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/system-documents/exists?documentTypeId=4386bfb4-6fe8-42e6-b51f-66b2f1a595ae&documentNumber=789Abraham&documentSiteId=2812af70-0d02-4199-83d6-045b6a6665a4",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"system-documents",
										"exists"
									],
									"query": [
										{
											"key": "documentTypeId",
											"value": "4386bfb4-6fe8-42e6-b51f-66b2f1a595ae"
										},
										{
											"key": "documentNumber",
											"value": "789Abraham"
										},
										{
											"key": "documentSiteId",
											"value": "2812af70-0d02-4199-83d6-045b6a6665a4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Airframes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the response\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Test response array objects have correct object keys\", () => {\r",
											"    for (const val of jsonData) {\r",
											"        pm.expect(val.hasOwnProperty(\"id\")).to.be.true;\r",
											"        pm.expect(val.hasOwnProperty(\"airframe\")).to.be.true;\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "SM_SSOID",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "CWC",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/airframes",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"airframes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Documents List Excel Export",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "SM_SSOID",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "CWC",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/system-documents/excel-export-documents",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"system-documents",
										"excel-export-documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish Document",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"systemDocumentId\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');\r",
											"var myUUID = uuid.v4();\r",
											"console.log(myUUID);\r",
											"pm.collectionVariables.set(\"documentNumber\", myUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "SM_SSOID",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "CWC",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "documentTitle",
											"value": "Test Scooter 6",
											"type": "text"
										},
										{
											"key": "documentSite",
											"value": "2ce4e00a-fc6b-41be-bcc6-6fc4bdca48b9",
											"type": "text"
										},
										{
											"key": "documentType",
											"value": "6c2a5ed5-e4ba-48fa-a8b7-7d4b5f3a0755",
											"type": "text"
										},
										{
											"key": "documentNumber",
											"value": "{{documentNumber}}",
											"type": "text"
										},
										{
											"key": "documentRevision",
											"value": "1",
											"type": "text"
										},
										{
											"key": "partsAffected[0]",
											"value": "part1111",
											"type": "text"
										},
										{
											"key": "partsAffected[1]",
											"value": "abc88",
											"type": "text"
										},
										{
											"key": "partsAffected[2]",
											"value": "yyy77",
											"type": "text"
										},
										{
											"key": "aircraftPlatforms[0]",
											"value": "30988f79-a668-4096-9e85-e06662278072",
											"type": "text"
										},
										{
											"key": "aircraftPlatforms[1]",
											"value": "4dce2462-55c8-45aa-8641-c242d64138ae",
											"type": "text"
										},
										{
											"key": "specificCustomers[0]",
											"value": "fd5998f0-97a5-4197-a84f-56d9d433f1a8",
											"type": "text"
										},
										{
											"key": "specificCustomers[1]",
											"value": "b3a5868a-4441-4f30-b49c-02bd87218011",
											"type": "text"
										},
										{
											"key": "emailNotification",
											"value": "true",
											"type": "text"
										},
										{
											"key": "companySpecific",
											"value": "true",
											"type": "text"
										},
										{
											"key": "documentRevisionDate",
											"value": "2022-03-01",
											"type": "text"
										},
										{
											"key": "documentDistributionDate",
											"value": "2022-03-01",
											"type": "text"
										},
										{
											"key": "documentUploadFile",
											"type": "file",
											"src": "/tmp/test.pdf"
										}
									]
								},
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/system-document",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"system-document"
									]
								}
							},
							"response": []
						},
						{
							"name": "Document Download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "SM_SSOID",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "CWC",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/system-documents/download/pdf/{{systemDocumentId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"system-documents",
										"download",
										"pdf",
										"{{systemDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Document by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.systemDocumentId).to.be.a(\"string\");",
											"  pm.expect(jsonData.documentTitle).to.be.a(\"string\");",
											"  pm.expect(jsonData.documentSite).to.be.a(\"string\");",
											"  pm.expect(jsonData.documentSiteID).to.be.a(\"string\");",
											"  pm.expect(jsonData.documentType).to.be.a(\"string\");",
											"  pm.expect(jsonData.documentTypeID).to.be.a(\"string\");",
											"  pm.expect(jsonData.documentNumber).to.be.a(\"string\");",
											"  pm.expect(jsonData.documentRevision).to.be.a(\"string\");",
											"  pm.expect(jsonData.fileName).to.be.a(\"string\");",
											"  pm.expect(jsonData.partsAffected).to.be.a(\"array\");",
											"  pm.expect(jsonData.aircraftPlatforms).to.be.a(\"array\");",
											"  pm.expect(jsonData.specificCustomers).to.be.a(\"array\");",
											"  pm.expect(jsonData.companyPaidSubscription).to.be.a(\"array\");",
											"  pm.expect(jsonData.documentRevisionDate).to.be.a(\"string\");",
											"  pm.expect(jsonData.documentDistributionDate).to.be.a(\"string\");",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "SM_SSOID",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "CWC",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/system-documents/{{systemDocumentId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"system-documents",
										"{{systemDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update System Document",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// THIS TEST IS DISABLED. LOOK INTO IT\r",
											"\r",
											"// pm.test(\"Status test\", function () {\r",
											"//     pm.expect(pm.response.code).to.be.oneOf([200,404]);\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const documentNumber = Math.floor((Math.random()*10000 +1));",
											"pm.globals.set(\"documentNumber\", documentNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "documentUploadFile",
											"type": "file",
											"src": "/tmp/test.pdf"
										},
										{
											"key": "documentRevision",
											"value": "12344567",
											"type": "text"
										},
										{
											"key": "documentSite",
											"value": "{{documentSiteId}}",
											"type": "text"
										},
										{
											"key": "documentType",
											"value": "{{documentTypeId}}",
											"type": "text"
										},
										{
											"key": "documentTitle",
											"value": "TestSystemUpdateDocument",
											"type": "text"
										},
										{
											"key": "documentNumber",
											"value": "{{documentNumber}}",
											"type": "text"
										},
										{
											"key": "companySpecific",
											"value": "true",
											"type": "text"
										},
										{
											"key": "emailNotification",
											"value": "false",
											"type": "text"
										},
										{
											"key": "documentRevisionDate",
											"value": "2022-08-11",
											"type": "text"
										},
										{
											"key": "documentDistributionDate",
											"value": "2022-08-11",
											"type": "text"
										},
										{
											"key": "aircraftPlatforms",
											"value": "3cf097f3-32f7-4c26-b8f7-a6f73cd01c5f",
											"type": "text"
										},
										{
											"key": "specificCustomers",
											"value": "5e14434a-01aa-433f-bc82-c17c9cfb2e30",
											"type": "text"
										},
										{
											"key": "partsAffected",
											"value": "0000123",
											"type": "text"
										},
										{
											"key": "paidSubscriptions",
											"value": "5e14434a-01aa-433f-bc82-c17c9cfb2e30",
											"type": "text"
										},
										{
											"key": "powerDocument",
											"value": "true",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/system-document/{{systemDocumentId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"system-document",
										"{{systemDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Soft Delete Document",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "SM_SSOID",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "CWC",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/system-documents/{{systemDocumentId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"system-documents",
										"{{systemDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hard Delete Document",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "SM_SSOID",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "CWC",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/avsystem/system-documents/hard-delete/{{systemDocumentId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"avsystem",
										"system-documents",
										"hard-delete",
										"{{systemDocumentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Notification Controller",
					"item": [
						{
							"name": "Notification Manual",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/notification/manuals",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"notification",
										"manuals"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bookcases {Bookcase} Email_Flag {flag}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/notification/bookcases/gek108745/email-flag?flag=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"notification",
										"bookcases",
										"gek108745",
										"email-flag"
									],
									"query": [
										{
											"key": "flag",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bookcases {Bookcase} Email_Notification {action}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "212462850",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "cwc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/notification/bookcases/gek108745/email-notification-date?action=reset",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"notification",
										"bookcases",
										"gek108745",
										"email-notification-date"
									],
									"query": [
										{
											"key": "action",
											"value": "reset"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Notification Reach",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status test\", function () {\r",
											"   pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"let skipTest = (jsonData === undefined || jsonData.length === 0);\r",
											"\r",
											"(skipTest ? pm.test.skip : pm.test)('Body is empty', function () {\r",
											"  pm.test(\"Test the data type from response\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
											"  });\r",
											"});\r",
											"\r",
											"(skipTest ? pm.test.skip : pm.test)('Body is empty', function () {\r",
											"  pm.test(\"Test response array objects have correct object\", () => {\r",
											"      for (const val of jsonData) {\r",
											"        pm.expect(val.hasOwnProperty(\"docType\")).to.be.true;\r",
											"        pm.expect(val.hasOwnProperty(\"engineModel\")).to.be.true;\r",
											"        pm.expect(val.hasOwnProperty(\"family\")).to.be.true;\r",
											"\r",
											"      }\r",
											"  });\r",
											"});\r",
											"\r",
											"(skipTest ? pm.test.skip : pm.test)('Body is empty', function () {\r",
											"  pm.test(\"Test response array objects have non-null values\", () => {\r",
											"      for (const val of jsonData) {\r",
											"        pm.expect(val.docType).to.not.be.null.and.empty;\r",
											"        pm.expect(val.title).to.not.be.null.and.empty;\r",
											"        pm.expect(val.engineModel).to.not.be.null.and.empty;\r",
											"        pm.expect(val.family).to.not.be.null.and.empty;\r",
											"        pm.expect(val.casNumber).to.not.be.null.and.empty;\r",
											"      }\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/notification/reach",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"notification",
										"reach"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reach Reset Last Sent Email Date on Upload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "212462850",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "cwc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/notification/reach/set-email-notification-date?action=reset&documentTitle=TestGenx1b&partName=genx-part1&fileName=sample.pdf",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"notification",
										"reach",
										"set-email-notification-date"
									],
									"query": [
										{
											"key": "action",
											"value": "reset"
										},
										{
											"key": "documentTitle",
											"value": "TestGenx1b"
										},
										{
											"key": "partName",
											"value": "genx-part1"
										},
										{
											"key": "fileName",
											"value": "sample.pdf"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reach Update Email Flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "212462850",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "cwc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/notification/reach/set-email-flag?flag=true&documentTitle=Test CFM Doc&partName=Test Part 1&fileName=test2.pdf",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"notification",
										"reach",
										"set-email-flag"
									],
									"query": [
										{
											"key": "flag",
											"value": "true"
										},
										{
											"key": "documentTitle",
											"value": "Test CFM Doc",
											"description": "eg Jen Test Doc 2"
										},
										{
											"key": "partName",
											"value": "Test Part 1",
											"description": "eg Test Part 1"
										},
										{
											"key": "fileName",
											"value": "test2.pdf"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "EngineDocAdminController",
					"item": [
						{
							"name": "Document Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"\r",
											"pm.expect(pm.response.code).to.be.oneOf([200,404]);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "default"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/engine-documents/document-types",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"engine-documents",
										"document-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Documents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"    pm.expect(jsonData).to.be.an(\"object\");",
											"    pm.expect(jsonData.content).to.be.an(\"array\");",
											"    pm.expect(jsonData.content.length).to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"Test response array objects have correct object keys\", () => {",
											"    for (const val of jsonData.content) {",
											"        pm.expect(val.hasOwnProperty(\"id\")).to.be.true;",
											"        pm.expect(val.hasOwnProperty(\"documentType\")).to.be.true;",
											"        pm.expect(val.hasOwnProperty(\"engineModels\")).to.be.true;",
											"        pm.expect(val.hasOwnProperty(\"lastUpdatedDate\")).to.be.true;",
											"    }",
											"});",
											"",
											"// NOTE: this collection variable is used by the Common Controller - Techdocs {ID} PDF REACH request",
											"pm.collectionVariables.set(\"reach_document_id\", jsonData.content[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "default"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/engine-documents?size=10&page=0&sortBy=lastUpdatedDate%7Casc&type=REACH&model=CF6-6&searchTerm=cf6-6",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"engine-documents"
									],
									"query": [
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "sortBy",
											"value": "lastUpdatedDate%7Casc"
										},
										{
											"key": "type",
											"value": "REACH"
										},
										{
											"key": "model",
											"value": "CF6-6"
										},
										{
											"key": "searchTerm",
											"value": "cf6-6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Excel Download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/engine-documents/excel-export-documents",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"engine-documents",
										"excel-export-documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Document REACH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.id).to.be.a(\"string\");",
											" });",
											"",
											"pm.collectionVariables.set(\"reach_added_document_id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "text"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "documentTitle",
											"value": "Test Document",
											"type": "text"
										},
										{
											"key": "partName",
											"value": "Test Part",
											"type": "text"
										},
										{
											"key": "emailNotification",
											"value": "true",
											"type": "text"
										},
										{
											"key": "engineModels",
											"value": "CF34-10A",
											"type": "text"
										},
										{
											"key": "partNumbers",
											"value": "123456,1234567",
											"type": "text"
										},
										{
											"key": "casNumbers",
											"value": "CAS123",
											"type": "text"
										},
										{
											"key": "documentUploadFile",
											"type": "file",
											"src": "/tmp/test.pdf"
										},
										{
											"key": "issueDate",
											"value": "2022-06-14",
											"description": "YYYY-mm-dd",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/services/techpubs/admin/engine-documents/REACH",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"engine-documents",
										"REACH"
									]
								}
							},
							"response": []
						},
						{
							"name": "AWS-S3-pdf-download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"\r",
											"pm.expect(pm.response.code).to.be.oneOf([200,404,400]);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "default"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/engine-documents/download/pdf/{{reach_added_document_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"engine-documents",
										"download",
										"pdf",
										"{{reach_added_document_id}}"
									],
									"query": [
										{
											"key": "sm_ssoid",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Document",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "default"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/engine-documents/{{reach_added_document_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"engine-documents",
										"{{reach_added_document_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hard Delete Document",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "default"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{host}}/services/techpubs/admin/engine-documents/hard-delete/{{reach_added_document_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"engine-documents",
										"hard-delete",
										"{{reach_added_document_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engine_Document_MetaData",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											" pm.test(\"Test data type of the response\", () => {\r",
											"   pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.documentId).to.be.string;\r",
											"   pm.expect(jsonData.documentTitle).to.be.string;\r",
											"   pm.expect(jsonData.documentType).to.be.string;\r",
											"   pm.expect(jsonData.partName).to.be.string;\r",
											"   pm.expect(jsonData.emailNotification).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.engineModels).to.be.string;\r",
											"   pm.expect(jsonData.partNumbers).to.be.string;\r",
											"   pm.expect(jsonData.casNumbers).to.be.string\r",
											"   pm.expect(jsonData.issueDate).to.be.string;\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "default"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{host}}/services/techpubs/admin/engine-documents/{{reach_document_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"engine-documents",
										"{{reach_document_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Document",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											" pm.test(\"Test data type of the response\", () => {\r",
											"   pm.expect(jsonData).to.be.an(\"object\");\r",
											"   pm.expect(jsonData.Id).to.be.string;\r",
											"   pm.expect(jsonData.engineDocumentTypeId).to.be.string;\r",
											"   pm.expect(jsonData.documentTitle).to.be.string;\r",
											"   pm.expect(jsonData.partName).to.be.string;\r",
											"   pm.expect(jsonData.emailNotification).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.deleted).to.be.a(\"boolean\");\r",
											"   pm.expect(jsonData.fileName).to.be.not.equals(null);\r",
											"   pm.expect(jsonData.createdDate).to.be.string;\r",
											"   pm.expect(jsonData.lastUpdatedDate).to.be.string;\r",
											"   pm.expect(jsonData.issueDate).to.be.string;\r",
											"   pm.expect(jsonData.lastEmailSentDate).to.be.equals(null);\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "sm_ssoid",
										"value": "{{sm_ssoid}}",
										"type": "default"
									},
									{
										"key": "portal_id",
										"value": "{{portal_id}}",
										"type": "default"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "documentTitle",
											"value": "DarkMode",
											"type": "default"
										},
										{
											"key": "partName",
											"value": "Light",
											"type": "default"
										},
										{
											"key": "emailNotification",
											"value": "true",
											"type": "default"
										},
										{
											"key": "documentEditFile",
											"type": "file",
											"src": "/tmp/test.pdf"
										},
										{
											"key": "engineModels",
											"value": "CF6-6",
											"type": "default"
										},
										{
											"key": "partNumbers",
											"value": "T82842",
											"type": "default"
										},
										{
											"key": "casNumbers",
											"value": "CAS29-562",
											"type": "default"
										},
										{
											"key": "issueDate",
											"value": "2022-07-15",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/services/techpubs/admin/engine-documents/{{reach_document_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"services",
										"techpubs",
										"admin",
										"engine-documents",
										"{{reach_document_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Common Controller",
			"item": [
				{
					"name": "Ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/ping",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs {ID}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response returns html text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-type\")).to.contain(\"html\");",
									"});",
									"",
									"const $ = cheerio.load(pm.response.text());",
									"const $embed = $(\"embed\");",
									"const srcType = $embed.attr('src');",
									"const docType = $embed.attr(\"type\");",
									"pm.test(\"Response has document src and type\", () => {",
									"    pm.expect(srcType).to.be.a(\"string\");",
									"    pm.expect(docType).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/5fee39be6d6b7c7d90501840?type=fh",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"5fee39be6d6b7c7d90501840"
							],
							"query": [
								{
									"key": "type",
									"value": "fh"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs {ID} Associated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.an(\"boolean\");",
									"  pm.expect(jsonData.title).to.be.a(\"string\");",
									"  pm.expect(jsonData.type).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].id).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].resourceUri).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].groupName).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].model).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].section).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].releaseDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].fileType).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].printable).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].multibrowser).to.be.a(\"string\");",
									" });",
									"",
									" pm.test(\"Associated documents CMM, AOW, or FH\", () => {",
									"    let arr = [\"CMM\",\"AOW\", \"FH\"];",
									"    pm.expect(jsonData.type).to.contain.oneOf(arr);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/5fee39be6d6b7c7d90501840/associated?type=fh",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"5fee39be6d6b7c7d90501840",
								"associated"
							],
							"query": [
								{
									"key": "type",
									"value": "fh"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs {ID} Bin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is a pdf\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"pdf\");",
									"});",
									"",
									"pm.test(\"Response file is a pdf\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".pdf\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/5fee39be6d6b7c7d90501840/bin?type=fh",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"5fee39be6d6b7c7d90501840",
								"bin"
							],
							"query": [
								{
									"key": "type",
									"value": "fh"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs {ID} PDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is a pdf\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"pdf\");",
									"});",
									"",
									"pm.test(\"Response file is a pdf\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".pdf\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/5fee39be6d6b7c7d90501840/pdf?type=fh",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"5fee39be6d6b7c7d90501840",
								"pdf"
							],
							"query": [
								{
									"key": "type",
									"value": "fh"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs {ID} PDF REACH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is a pdf\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"pdf\");",
									"});",
									"",
									"pm.test(\"Response file is a pdf\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".pdf\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/{{reach_document_id}}/pdf?type=reach",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"{{reach_document_id}}",
								"pdf"
							],
							"query": [
								{
									"key": "type",
									"value": "reach"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs CSS {Res}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response css returned\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-type\")).to.contain(\"css\");",
									"});",
									"",
									"pm.test(\"CSS file returned\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-disposition\")).to.contain(\".css\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/css/geae-ipc.css",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"css",
								"geae-ipc.css"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Docs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].id).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].type).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].resourceUri).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].groupName).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].program).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programtitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].year).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].monthQuarterDisplay).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].multibrowser).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "sEcho",
									"value": "2",
									"type": "text"
								},
								{
									"key": "iColumns",
									"value": "8",
									"type": "text"
								},
								{
									"key": "sColumns",
									"value": "",
									"type": "text"
								},
								{
									"key": "iDisplayStart",
									"value": "0",
									"type": "text"
								},
								{
									"key": "iDisplayLength",
									"value": "24",
									"type": "text"
								},
								{
									"key": "mDataProp_0",
									"value": "programtitle",
									"type": "text"
								},
								{
									"key": "mDataProp_1",
									"value": "year",
									"type": "text"
								},
								{
									"key": "mDataProp_2",
									"value": "monthQuarterDisplay",
									"type": "text"
								},
								{
									"key": "sSearch",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex",
									"value": "false",
									"type": "text"
								},
								{
									"key": "sSearch_0",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex_0",
									"value": "false",
									"type": "text"
								},
								{
									"key": "sSearch_1",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex_1",
									"value": "false",
									"type": "text"
								},
								{
									"key": "sSearch_2",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex_2",
									"value": "false",
									"type": "text"
								},
								{
									"key": "iSortCol_0",
									"value": "1",
									"type": "text"
								},
								{
									"key": "sSortDir_0",
									"value": "desc",
									"type": "text"
								},
								{
									"key": "iSortCol_1",
									"value": "2",
									"type": "text"
								},
								{
									"key": "sSortDir_1",
									"value": "desc",
									"type": "text"
								},
								{
									"key": "iSortingCols",
									"value": "2",
									"type": "text"
								},
								{
									"key": "type",
									"value": "fh",
									"type": "text"
								},
								{
									"key": "mDataProp_3",
									"value": "family",
									"type": "text"
								},
								{
									"key": "sSearch_3",
									"value": "GENX",
									"type": "text"
								},
								{
									"key": "bRegex_3",
									"value": "false",
									"type": "text"
								},
								{
									"key": "mDataProp_4",
									"value": "model",
									"type": "text"
								},
								{
									"key": "sSearch_4",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex_4",
									"value": "false",
									"type": "text"
								},
								{
									"key": "mDataProp_5",
									"value": "aircraft",
									"type": "text"
								},
								{
									"key": "sSearch_5",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex_5",
									"value": "false",
									"type": "text"
								},
								{
									"key": "mDataProp_6",
									"value": "tail",
									"type": "text"
								},
								{
									"key": "sSearch_6",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex_6",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/docs",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"docs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Docs REACH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].id).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].type).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].resourceUri).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].groupName).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].program).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programtitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].multibrowser).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "sEcho",
									"value": " 3",
									"type": "text"
								},
								{
									"key": "iColumns",
									"value": " 9",
									"type": "text"
								},
								{
									"key": "sColumns",
									"value": " ",
									"type": "text"
								},
								{
									"key": "iDisplayStart",
									"value": " 0",
									"type": "text"
								},
								{
									"key": "iDisplayLength",
									"value": " 24",
									"type": "text"
								},
								{
									"key": "mDataProp_0",
									"value": " programtitle",
									"type": "text"
								},
								{
									"key": "mDataProp_1",
									"value": " title",
									"type": "text"
								},
								{
									"key": "mDataProp_2",
									"value": " revisionDate",
									"type": "text"
								},
								{
									"key": "sSearch",
									"value": " ",
									"type": "text"
								},
								{
									"key": "bRegex",
									"value": " false",
									"type": "text"
								},
								{
									"key": "sSearch_0",
									"value": " ",
									"type": "text"
								},
								{
									"key": "bRegex_0",
									"value": " false",
									"type": "text"
								},
								{
									"key": "sSearch_1",
									"value": " ",
									"type": "text"
								},
								{
									"key": "bRegex_1",
									"value": " false",
									"type": "text"
								},
								{
									"key": "sSearch_2",
									"value": " ",
									"type": "text"
								},
								{
									"key": "bRegex_2",
									"value": " false",
									"type": "text"
								},
								{
									"key": "sSearch_3",
									"value": " ",
									"type": "text"
								},
								{
									"key": "bRegex_3",
									"value": " false",
									"type": "text"
								},
								{
									"key": "iSortCol_0",
									"value": " 0",
									"type": "text"
								},
								{
									"key": "sSortDir_0",
									"value": " asc",
									"type": "text"
								},
								{
									"key": "iSortingCols",
									"value": " 1",
									"type": "text"
								},
								{
									"key": "type",
									"value": " reach",
									"type": "text"
								},
								{
									"key": "mDataProp_4",
									"value": " family",
									"type": "text"
								},
								{
									"key": "sSearch_4",
									"value": " GENX",
									"type": "text"
								},
								{
									"key": "bRegex_4",
									"value": " false",
									"type": "text"
								},
								{
									"key": "mDataProp_5",
									"value": " model",
									"type": "text"
								},
								{
									"key": "sSearch_5",
									"value": " ",
									"type": "text"
								},
								{
									"key": "bRegex_5",
									"value": " false",
									"type": "text"
								},
								{
									"key": "mDataProp_6",
									"value": " aircraft",
									"type": "text"
								},
								{
									"key": "sSearch_6",
									"value": " ",
									"type": "text"
								},
								{
									"key": "bRegex_6",
									"value": " false",
									"type": "text"
								},
								{
									"key": "mDataProp_7",
									"value": " tail",
									"type": "text"
								},
								{
									"key": "sSearch_7",
									"value": " ",
									"type": "text"
								},
								{
									"key": "bRegex_7",
									"value": " false",
									"type": "text"
								},
								{
									"key": "mDataProp_8",
									"value": " esn",
									"type": "text"
								},
								{
									"key": "sSearch_8",
									"value": " ",
									"type": "text"
								},
								{
									"key": "bRegex_8",
									"value": " false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/docs",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"docs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Logo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Logo returned\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"image\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/logo",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"logo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Program} Banner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Banner returned\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"image\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek112060/banner",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek112060",
								"banner"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookcase Version Controller",
			"item": [
				{
					"name": "Techdocs Pgms {Bookcase} Versions {Version} Mans {Manual} File {Filename}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response returns html text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/html\");",
									"});",
									"",
									"pm.test(\"Response returns txt file\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".txt\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek114118_lr/versions/3.5/mans/sbs/file/genx-2b-sb-75-0039-r00.htm",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek114118_lr",
								"versions",
								"3.5",
								"mans",
								"sbs",
								"file",
								"genx-2b-sb-75-0039-r00.htm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Bookcase} Versions {version} mans {manual} Part Details {filename}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response returns txt file\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".xlsx\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek112080/versions/10.3/mans/sbs/part-details/cf34-10e-sb-72-0004-r01.htm",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek112080",
								"versions",
								"10.3",
								"mans",
								"sbs",
								"part-details",
								"cf34-10e-sb-72-0004-r01.htm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Bookcase} Versions {Version} Mans {Manual} File {Filename} PDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response type returns pdf\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"pdf\");",
									"});",
									"",
									"pm.test(\"Response returns pdf file\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".pdf\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek114118_lr/versions/3.5/mans/sbs/file/genx-2b-sb-75-0039-r00.htm/pdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek114118_lr",
								"versions",
								"3.5",
								"mans",
								"sbs",
								"file",
								"genx-2b-sb-75-0039-r00.htm",
								"pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Bookcase} Versions {Version} Mans {Manual} Res **",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content return type\", () => {",
									"    let arr = [\"application\", \"image\", \"model\", \"video\"];",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain.oneOf(arr);",
									"});",
									"",
									"pm.test(\"Response file type\", () => {",
									"    let arr2 = [\"pdf\", \"png\", \"gif\", \"jpeg\", \"tiff\", \"vrml\", \"svg\", \"cgm\", \"mp4\", \"avi\"];",
									"    pm.expect(pm.response.headers.get('Content-Disposition')).to.contain.oneOf(arr2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek112865_lr/versions/5.1/mans/gek112851/res/graphics/g1257661-01.cgm.png",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek112865_lr",
								"versions",
								"5.1",
								"mans",
								"gek112851",
								"res",
								"graphics",
								"g1257661-01.cgm.png"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Bookcase} Versions {Version} Mans {Manual} SB {SbNbr}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content returns html text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek114118_lr/versions/3.5/mans/sbs/sb/72-0124",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek114118_lr",
								"versions",
								"3.5",
								"mans",
								"sbs",
								"sb",
								"72-0124"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Bookcase} Versions {Version} Mans {Manual} Trg {Target}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content returns html text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek114118_lr/versions/3.5/mans/gek114122/trg/2255m82g06?bw=low",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek114118_lr",
								"versions",
								"3.5",
								"mans",
								"gek114122",
								"trg",
								"2255m82g06"
							],
							"query": [
								{
									"key": "bw",
									"value": "low"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookcase Controller",
			"item": [
				{
					"name": "Docs Pgms {Program} Mans {Manual} File {Filename}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content type is text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text\");",
									"})",
									"",
									"pm.test(\"Response file type is txt\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".txt\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/docs/pgms/gek114118_lr/mans/gek114119/file/pb05-00-00-00-001.htm",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"docs",
								"pgms",
								"gek114118_lr",
								"mans",
								"gek114119",
								"file",
								"pb05-00-00-00-001.htm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Docs Pgms {Program} Mans {Manual} Res **",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Resource file returned\", function () {",
									"    let arr = [\"application\", \"image\", \"model\", \"video\"];",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain.oneOf(arr);",
									"});",
									"",
									"",
									"pm.test(\"Resource file type returned\", () => {",
									"    let arr2 = [\"pdf\", \"png\", \"gif\", \"jpeg\", \"tiff\", \"vrml\", \"svg\", \"cgm\", \"mp4\", \"avi\"];",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain.oneOf(arr2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/docs/pgms/gek114118_lr/mans/sbs/res/graphics/g1256736-01.cgm.png",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"docs",
								"pgms",
								"gek114118_lr",
								"mans",
								"sbs",
								"res",
								"graphics",
								"g1256736-01.cgm.png"
							]
						}
					},
					"response": []
				},
				{
					"name": "Manual",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].manualdocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].revisiondate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].revisionnumber).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].multibrowser).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].onlineVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].printable).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].programdocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programtitle).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "sEcho",
									"value": "2",
									"type": "text"
								},
								{
									"key": "iColumns",
									"value": "8",
									"type": "text"
								},
								{
									"key": "sColumns",
									"value": "",
									"type": "text"
								},
								{
									"key": "iDisplayStart",
									"value": "0",
									"type": "text"
								},
								{
									"key": "iDisplayLength",
									"value": "24",
									"type": "text"
								},
								{
									"key": "mDataProp_0",
									"value": "programtitle",
									"type": "text"
								},
								{
									"key": "mDataProp_1",
									"value": "title",
									"type": "text"
								},
								{
									"key": "mDataProp_2",
									"value": "revisiondate",
									"type": "text"
								},
								{
									"key": "sSearch",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex",
									"value": "false",
									"type": "text"
								},
								{
									"key": "sSearch_0",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex_0",
									"value": "false",
									"type": "text"
								},
								{
									"key": "sSearch_1",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex_1",
									"value": "false",
									"type": "text"
								},
								{
									"key": "sSearch_2",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex_2",
									"value": "false",
									"type": "text"
								},
								{
									"key": "iSortCol_0",
									"value": "2",
									"type": "text"
								},
								{
									"key": "sSortDir_0",
									"value": "desc",
									"type": "text"
								},
								{
									"key": "iSortingCols",
									"value": "1",
									"type": "text"
								},
								{
									"key": "type",
									"value": "manual",
									"type": "text"
								},
								{
									"key": "mDataProp_3",
									"value": "family",
									"type": "text"
								},
								{
									"key": "sSearch_3",
									"value": "GENX",
									"type": "text"
								},
								{
									"key": "bRegex_3",
									"value": "false",
									"type": "text"
								},
								{
									"key": "mDataProp_4",
									"value": "model",
									"type": "text"
								},
								{
									"key": "sSearch_4",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex_4",
									"value": "false",
									"type": "text"
								},
								{
									"key": "mDataProp_5",
									"value": "aircraft",
									"type": "text"
								},
								{
									"key": "sSearch_5",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex_5",
									"value": "false",
									"type": "text"
								},
								{
									"key": "mDataProp_6",
									"value": "tail",
									"type": "text"
								},
								{
									"key": "sSearch_6",
									"value": "",
									"type": "text"
								},
								{
									"key": "bRegex_6",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/services/techpubs/manual",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"manual"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pgms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].programDocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].subSystem).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].dvdVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programOnlineVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].licensedProgram).to.be.a(\"boolean\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/pgms?subsystem=TD",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"pgms"
							],
							"query": [
								{
									"key": "subsystem",
									"value": "TD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pgms Aircrafts {Aircraft}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].programDocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].subSystem).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].dvdVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programOnlineVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].licensedProgram).to.be.a(\"boolean\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/pgms/aircrafts/767-300ER?subsystem=TD",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"pgms",
								"aircrafts",
								"767-300ER"
							],
							"query": [
								{
									"key": "subsystem",
									"value": "TD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pgms Aircrafts {Aircraft} Tails {Tail}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].programDocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].subSystem).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].dvdVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programOnlineVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].licensedProgram).to.be.a(\"boolean\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/pgms/aircrafts/767-300ER/tails/OO-JNL?subsystem=TD",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"pgms",
								"aircrafts",
								"767-300ER",
								"tails",
								"OO-JNL"
							],
							"query": [
								{
									"key": "subsystem",
									"value": "TD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pgms ESNs {Esn List}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].programDocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].subSystem).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].dvdVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programOnlineVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].licensedProgram).to.be.a(\"boolean\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/pgms/esns/872995%7C950996%7C994996?subsystem=TD",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"pgms",
								"esns",
								"872995%7C950996%7C994996"
							],
							"query": [
								{
									"key": "subsystem",
									"value": "TD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pgms Fams {Family}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].programDocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].subSystem).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].dvdVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programOnlineVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].licensedProgram).to.be.a(\"boolean\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/pgms/fams/GE90?subsystem=TD",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"pgms",
								"fams",
								"GE90"
							],
							"query": [
								{
									"key": "subsystem",
									"value": "TD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pgms Fams {Family} Mods {Model}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].programDocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].subSystem).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].dvdVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programOnlineVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].licensedProgram).to.be.a(\"boolean\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/pgms/fams/GE90/mods/GE90-100?subsystem=TD",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"pgms",
								"fams",
								"GE90",
								"mods",
								"GE90-100"
							],
							"query": [
								{
									"key": "subsystem",
									"value": "TD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pgms Mods {Model}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].programDocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].subSystem).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].dvdVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programOnlineVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].licensedProgram).to.be.a(\"boolean\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/pgms/mods/GE90-100?subsystem=TD",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"pgms",
								"mods",
								"GE90-100"
							],
							"query": [
								{
									"key": "subsystem",
									"value": "TD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pgms Tails {Tail}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].programDocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].subSystem).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].dvdVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programOnlineVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].licensedProgram).to.be.a(\"boolean\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/pgms/tails/OO-JNL?subsystem=TD",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"pgms",
								"tails",
								"OO-JNL"
							],
							"query": [
								{
									"key": "subsystem",
									"value": "TD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Program} Mans {Manual} File {Filename}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content is text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text\");",
									"});",
									"",
									"pm.test(\"Response file is a txt file\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".txt\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek114118_lr/mans/sbs/file/genx-2b-sb-72-0006-r01.htm",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek114118_lr",
								"mans",
								"sbs",
								"file",
								"genx-2b-sb-72-0006-r01.htm"
							],
							"query": [
								{
									"key": "bw",
									"value": "low",
									"description": "Possible values: high, low | Not required",
									"disabled": true
								},
								{
									"key": "mbdr",
									"value": "y",
									"description": "Possible values: y, n | Not required",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Program} Mans {Manual} File {Filename} Cortona GEK link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek112865_lr/versions/5.4/mans/gek112851/file/pb72-00-00-12-001.htm",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek112865_lr",
								"versions",
								"5.4",
								"mans",
								"gek112851",
								"file",
								"pb72-00-00-12-001.htm"
							],
							"query": [
								{
									"key": "bw",
									"value": "low",
									"description": "Possible values: high, low | Not required",
									"disabled": true
								},
								{
									"key": "mbdr",
									"value": "y",
									"description": "Possible values: y, n | Not required",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Program} Mans {Manual} File {Filename} Non Cortona GEK link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek112080/versions/10.3/mans/sbs/file/cf34-10e-sb-71-0000-r02.htm",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek112080",
								"versions",
								"10.3",
								"mans",
								"sbs",
								"file",
								"cf34-10e-sb-71-0000-r02.htm"
							],
							"query": [
								{
									"key": "bw",
									"value": "low",
									"description": "Possible values: high, low | Not required",
									"disabled": true
								},
								{
									"key": "mbdr",
									"value": "y",
									"description": "Possible values: y, n | Not required",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Program} Mans {Manual} File {Filename} PDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content is pdf\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"pdf\");",
									"});",
									"",
									"pm.test(\"Response file is a pdf file\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".pdf\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek114118_lr/mans/sbs/file/genx-2b-sb-72-0006-r01.htm/pdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek114118_lr",
								"mans",
								"sbs",
								"file",
								"genx-2b-sb-72-0006-r01.htm",
								"pdf"
							],
							"query": [
								{
									"key": "bw",
									"value": "low",
									"description": "Possible values: high, low | Not required",
									"disabled": true
								},
								{
									"key": "mbdr",
									"value": "y",
									"description": "Possible values: y, n | Not required",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Program} Mans {Manual} Summary {Filename}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content is text\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text/html\");",
									"});",
									"",
									"pm.test(\"Response file is a txt file\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".txt\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek114118_lr/mans/sbs/summary/genx-2b-sb-72-0006-r01.htm",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek114118_lr",
								"mans",
								"sbs",
								"summary",
								"genx-2b-sb-72-0006-r01.htm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Program} Mans {Manual} Summary {Filename} PDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content is pdf \", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"pdf\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response file is a pdf \", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".pdf\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek114118_lr/mans/sbs/summary/genx-2b-sb-72-0006-r01.htm/pdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek114118_lr",
								"mans",
								"sbs",
								"summary",
								"genx-2b-sb-72-0006-r01.htm",
								"pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Pgms {Program} Mans {Manual} Trg {Target}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is html\", () => {",
									"    pm.expect(pm.response.headers.get (\"Content-type\")).to.contain(\"html\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/pgms/gek114118_lr/mans/gek114122/trg/72-64-00-05-120",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"pgms",
								"gek114118_lr",
								"mans",
								"gek114122",
								"trg",
								"72-64-00-05-120"
							],
							"query": [
								{
									"key": "bw",
									"value": "low",
									"description": "Possible values: high, low | Not required",
									"disabled": true
								},
								{
									"key": "mbdr",
									"value": "y",
									"description": "Possible values: y, n | Not required",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Tps Pgms {Program} SCT {Category} Associated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.title).to.be.a(\"string\");",
									"  pm.expect(jsonData.type).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/tps/pgm/gek112060/sct/1/associated",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"tps",
								"pgm",
								"gek112060",
								"sct",
								"1",
								"associated"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Tps Pgms {Program} SCT {Category} Associated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is html text\", () => {\r",
									"    pm.expect(pm.response.headers.get (\"Content-type\")).to.contain(\"text/html\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/tps/pgm/CF34-10/sct/2/init",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"tps",
								"pgm",
								"CF34-10",
								"sct",
								"2",
								"init"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bookcases Online",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"array\");",
									"  pm.expect(jsonData[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData[0].bookcaseKey).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].bookcaseVersion).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].bookcaseVersionStatusCode).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].creationDate).to.be.a(\"number\");",
									"  pm.expect(jsonData[0].lastUpdatedDate).to.be.a(\"number\");",
									" });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/bookcases/online",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"bookcases",
								"online"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookcases Controller",
			"item": [
				{
					"name": "Bookcases {Bookcase} Books {Book} Files {File} Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.bookTitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.fileExtension).to.be.a(\"string\");",
									"  pm.expect(jsonData.approvedForPublish).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.title).to.be.a(\"string\");",
									"  pm.expect(jsonData.bookcaseKey).to.be.a(\"string\");",
									"  pm.expect(jsonData.type).to.be.a(\"string\");",
									"  pm.expect(jsonData.version).to.be.a(\"string\");",
									"  pm.expect(jsonData.id).to.be.a(\"string\");",
									"  pm.expect(jsonData.fileType).to.be.a(\"string\");",
									"  pm.expect(jsonData.resourceUri).to.be.a(\"string\");",
									"  pm.expect(jsonData.bookKey).to.be.a(\"string\");",
									"  pm.expect(jsonData.fileName).to.be.a(\"string\");",
									"  pm.expect(jsonData.multiMatch).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.bookcaseTitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.revisionDate).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/bookcases/gek114118_lr/books/sbs/files/genx-2b-sb-73-0089-r01.htm/details",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"bookcases",
								"gek114118_lr",
								"books",
								"sbs",
								"files",
								"genx-2b-sb-73-0089-r01.htm",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bookcases {Bookcase} Versions {Version} Books {Book} Files {File} Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.bookTitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.fileExtension).to.be.a(\"string\");",
									"  pm.expect(jsonData.approvedForPublish).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.title).to.be.a(\"string\");",
									"  pm.expect(jsonData.bookcaseKey).to.be.a(\"string\");",
									"  pm.expect(jsonData.type).to.be.a(\"string\");",
									"  pm.expect(jsonData.version).to.be.a(\"string\");",
									"  pm.expect(jsonData.id).to.be.a(\"string\");",
									"  pm.expect(jsonData.fileType).to.be.a(\"string\");",
									"  pm.expect(jsonData.resourceUri).to.be.a(\"string\");",
									"  pm.expect(jsonData.bookKey).to.be.a(\"string\");",
									"  pm.expect(jsonData.fileName).to.be.a(\"string\");",
									"  pm.expect(jsonData.multiMatch).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.bookcaseTitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.revisionDate).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/bookcases/gek114118_lr/versions/3.5/books/sbs/files/genx-2b-sb-73-0089-r01.htm/details",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"bookcases",
								"gek114118_lr",
								"versions",
								"3.5",
								"books",
								"sbs",
								"files",
								"genx-2b-sb-73-0089-r01.htm",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bookcases {Bookcase} Versions {Version} Books {Book} Trg {Trg} Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.bookTitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.fileExtension).to.be.a(\"string\");",
									"  pm.expect(jsonData.approvedForPublish).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.title).to.be.a(\"string\");",
									"  pm.expect(jsonData.bookcaseKey).to.be.a(\"string\");",
									"  pm.expect(jsonData.type).to.be.a(\"string\");",
									"  pm.expect(jsonData.version).to.be.a(\"string\");",
									"  pm.expect(jsonData.id).to.be.a(\"string\");",
									"  pm.expect(jsonData.fileType).to.be.a(\"string\");",
									"  pm.expect(jsonData.resourceUri).to.be.a(\"string\");",
									"  pm.expect(jsonData.bookKey).to.be.a(\"string\");",
									"  pm.expect(jsonData.fileName).to.be.a(\"string\");",
									"  pm.expect(jsonData.multiMatch).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.bookcaseTitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.revisionDate).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/bookcases/gek114118_lr/versions/3.5/books/gek114122/trg/72-64-00-05-120/details",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"bookcases",
								"gek114118_lr",
								"versions",
								"3.5",
								"books",
								"gek114122",
								"trg",
								"72-64-00-05-120",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bookcases {Bookcase} Engine Models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.engineModels).to.be.an(\"array\");",
									"  pm.expect(jsonData.engineModels[0]).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/bookcases/gek112060/engine-models",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"bookcases",
								"gek112060",
								"engine-models"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookcase TOC Version Controller",
			"item": [
				{
					"name": "Toc Bookcase {Bookcase} Versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"array\");",
									"  pm.expect(jsonData[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData[0].version).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].versionStatus).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].versionId).to.be.a(\"string\");",
									" });",
									"",
									" pm.test(\"Response returns only one online\", () => {",
									"     const onlineVersion = jsonData.filter((item) => item.versionStatus === \"online\");",
									"     pm.expect(onlineVersion.length).to.be.eql(1);",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/toc/bookcases/gek108744/versions",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"toc",
								"bookcases",
								"gek108744",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Toc Bookcases {Bookcase} Books {Version}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].fileExtension).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].type).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].revisionDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].tocTitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].key).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0].hasChildren).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].approvedForPublish).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].revised).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].pendingApproval).to.be.a(\"boolean\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/toc/bookcases/gek108744/books/9.2",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"toc",
								"bookcases",
								"gek108744",
								"books",
								"9.2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Toc Bookcases {Bookcase} {Book} {Version}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].fileExtension).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].type).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].revisionDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].tocTitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].key).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0].hasChildren).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].approvedForPublish).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].revised).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].pendingApproval).to.be.a(\"boolean\");",
									" });",
									"",
									" pm.test(\"Test format of childnode\", () => {",
									"  pm.expect(jsonData.objects[0].children[0].fileExtension).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children[0].revisionDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children[0].tocTitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children[0].key).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children[0].children).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0].children[0].hasChildren).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].children[0].approvedForPublish).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].children[0].revised).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].children[0].pendingApproval).to.be.a(\"boolean\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/toc/bookcases/gek108744/gek9266/9.2",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"toc",
								"bookcases",
								"gek108744",
								"gek9266",
								"9.2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Toc Bookcases {Bookcase} Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].fileExtension).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].type).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].revisionDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].tocTitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].key).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0].hasChildren).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].approvedForPublish).to.be.an(\"boolean\");",
									"  pm.expect(jsonData.objects[0].revised).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].pendingApproval).to.be.an(\"boolean\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/toc/bookcases/gek108744/books",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"toc",
								"bookcases",
								"gek108744",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Toc Bookcases Book Pageblk Publish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"key\": \"pb71-20-05-800-d\",\n\t\"publicationTypeCode\": \"ic\",\n\t\"resourceUri\": \"/techpubs/techdocs/pgms/gek108746/versions/10.1/mans/gek92451/file/cf6-80c2-4000-em-ic-71-20-05-800-D-91.htm\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/services/techpubs/toc/bookcases/book/pageblk/publish",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"toc",
								"bookcases",
								"book",
								"pageblk",
								"publish"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookcase TOC Controller",
			"item": [
				{
					"name": "Toc Bookcases {Bookcase}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].fileExtension).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].type).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].revisionDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].tocTitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].key).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0].hasChildren).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].approvedForPublish).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].revised).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].pendingApproval).to.be.a(\"boolean\");",
									"  ",
									" });",
									"",
									" pm.test(\"Test format of childnode\", () => {",
									"  pm.expect(jsonData.objects[0].children[0].fileExtension).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children[0].revisionDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children[0].tocTitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children[0].key).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].children[0].children).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0].children[0].hasChildren).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].children[0].approvedForPublish).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].children[0].revised).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].children[0].pendingApproval).to.be.a(\"boolean\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/toc/bookcases/gek108744",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"toc",
								"bookcases",
								"gek108744"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Confing Demo Controller",
			"item": [
				{
					"name": "Config Greeting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response greeting returned\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"text\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/services/techpubs/config/greeting",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"config",
								"greeting"
							]
						}
					},
					"response": []
				},
				{
					"name": "Config Ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/services/techpubs/config/ping",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"config",
								"ping"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Document Type Controller",
			"item": [
				{
					"name": "Docs Cmms {ID}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"html\");",
									"});",
									"",
									"const $ = cheerio.load(pm.response.text());",
									"const $embed = $(\"embed\");",
									"const srcType = $embed.attr('src');",
									"const cmmsDoc = $embed.attr(\"type\");",
									"pm.test(\"Response uri type test\", () => {",
									"    pm.expect(srcType).to.be.a(\"string\");",
									"    pm.expect(cmmsDoc).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/docs/cmms/602a9bd86d6b7c691e7c9c3e",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"docs",
								"cmms",
								"602a9bd86d6b7c691e7c9c3e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Docs Fhs {ID}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"html\");",
									"});",
									"",
									"const $ = cheerio.load(pm.response.text());",
									"const $embed = $(\"embed\");",
									"const srcType = $embed.attr('src');",
									"const docType = $embed.attr(\"type\");",
									"pm.test(\"Response uri type test\", () => {",
									"    pm.expect(srcType).to.be.a(\"string\");",
									"    pm.expect(docType).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/docs/fhs/6043e7616d6b7c691e7cae94",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"docs",
								"fhs",
								"6043e7616d6b7c691e7cae94"
							]
						}
					},
					"response": []
				},
				{
					"name": "Docs Fhs {ID} Pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"pdf\");",
									"});",
									"",
									"pm.test(\"Response file type test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".pdf\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/docs/fhs/6043e7616d6b7c691e7cae94/pdf?type=fh",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"docs",
								"fhs",
								"6043e7616d6b7c691e7cae94",
								"pdf"
							],
							"query": [
								{
									"key": "type",
									"value": "fh"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Cmms Tr {ID}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"html\");",
									"});",
									"",
									"const $ = cheerio.load(pm.response.text());",
									"const $embed = $(\"embed\");",
									"const srcType = $embed.attr('src');",
									"const cmmTR = $embed.attr(\"type\");",
									"pm.test(\"Response uri type test\", () => {",
									"    pm.expect(srcType).to.be.a(\"string\");",
									"    pm.expect(cmmTR).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/cmms/tr/601d405d6d6b7c691e7c9c1c",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"cmms",
								"tr",
								"601d405d6d6b7c691e7c9c1c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Docs Tps {ID}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"html\");",
									"});",
									"",
									"const $ = cheerio.load(pm.response.text());",
									"const $embed = $(\"embed\");",
									"const srcType = $embed.attr('src');",
									"const tpsDoc = $embed.attr(\"type\");",
									"pm.test(\"Response uri type test\", () => {",
									"    pm.expect(srcType).to.be.a(\"string\");",
									"    pm.expect(tpsDoc).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/docs/tps/5e96e1f06d6b7c65a38972c1",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"docs",
								"tps",
								"5e96e1f06d6b7c65a38972c1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Cmms {ID} Parts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/cmms/5a2af1d58746cb1f1e0286bb/parts",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"cmms",
								"5a2af1d58746cb1f1e0286bb",
								"parts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Cmms {ID} Pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"pdf\");",
									"});",
									"",
									"pm.test(\"Response file type test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".pdf\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/cmms/602a9bd86d6b7c691e7c9c3e/parts/pdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"cmms",
								"602a9bd86d6b7c691e7c9c3e",
								"parts",
								"pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Sm Sct {Category} Associated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.title).to.be.a(\"string\");",
									"  pm.expect(jsonData.type).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].id).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].resourceUri).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].groupName).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].releaseDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].multibrowser).to.be.a(\"string\");",
									" });",
									"",
									" pm.test(\"Return list contains only SM documents\", () => {",
									"     pm.expect(jsonData.type).to.be.eql(\"SM\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/sm/sct/Field%20Debris%20Guide/associated?models=CF6-50,CF6-6,CF6-80A,CF6-80C2,CF6-80E",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"sm",
								"sct",
								"Field%20Debris%20Guide",
								"associated"
							],
							"query": [
								{
									"key": "models",
									"value": "CF6-50,CF6-6,CF6-80A,CF6-80C2,CF6-80E"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Sm Sct {Category} Init",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"html\");",
									"});",
									"",
									"const $ = cheerio.load(pm.response.text());",
									"const $embed = $(\"embed\");",
									"const srcType = $embed.attr('src');",
									"const initDoc = $embed.attr(\"type\");",
									"pm.test(\"Response uri type test\", () => {",
									"    pm.expect(srcType).to.be.a(\"string\");",
									"    pm.expect(initDoc).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/sm/sct/Field%20Debris%20Guide/init?models=CF6-50,CF6-6,CF6-80A,CF6-80C2,CF6-80E",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"sm",
								"sct",
								"Field%20Debris%20Guide",
								"init"
							],
							"query": [
								{
									"key": "models",
									"value": "CF6-50,CF6-6,CF6-80A,CF6-80C2,CF6-80E"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Fhs {ID} sct {sctid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"html\");",
									"});",
									"",
									"const $ = cheerio.load(pm.response.text());",
									"const $embed = $(\"embed\");",
									"const srcType = $embed.attr('src');",
									"const dlFHDocs = $embed.attr(\"type\");",
									"pm.test(\"Response uri type test\", () => {",
									"    pm.expect(srcType).to.be.a(\"string\");",
									"    pm.expect(dlFHDocs).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/fhs/6043e7616d6b7c691e7cae9b/sct/6043e7616d6b7c691e7cae94",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"fhs",
								"6043e7616d6b7c691e7cae9b",
								"sct",
								"6043e7616d6b7c691e7cae94"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Fhs {ID} sct {sctid} Pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"pdf\");",
									"});",
									"",
									"pm.test(\"Response file type test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".pdf\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/fhs/6043e7616d6b7c691e7cae9b/sct/6043e7616d6b7c691e7cae94/pdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"fhs",
								"6043e7616d6b7c691e7cae9b",
								"sct",
								"6043e7616d6b7c691e7cae94",
								"pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Fhs {ID} Art {Artid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"html\");",
									"});",
									"",
									"const $ = cheerio.load(pm.response.text());",
									"const $embed = $(\"embed\");",
									"const srcType = $embed.attr('src');",
									"const dlFHDocs = $embed.attr(\"type\");",
									"pm.test(\"Response uri type test\", () => {",
									"    pm.expect(srcType).to.be.a(\"string\");",
									"    pm.expect(dlFHDocs).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/fhs/603c1a4d6d6b7c691e7cacb7/art/603c1a4d6d6b7c691e7cacb0",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"fhs",
								"603c1a4d6d6b7c691e7cacb7",
								"art",
								"603c1a4d6d6b7c691e7cacb0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Fhs {ID} Art {Artid} Pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"pdf\");",
									"});",
									"",
									"pm.test(\"Response file type test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".pdf\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/fhs/603c1a4d6d6b7c691e7cacb7/art/603c1a4d6d6b7c691e7cacb0/pdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"fhs",
								"603c1a4d6d6b7c691e7cacb7",
								"art",
								"603c1a4d6d6b7c691e7cacb0",
								"pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs ll Sct {Category} Associated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.title).to.be.a(\"string\");",
									"  pm.expect(jsonData.type).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].id).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].resourceUri).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].groupName).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].fileType).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].uploadYearNumber).to.be.a(\"number\");",
									"  pm.expect(jsonData.objects[0].releaseDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].printable).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].multibrowser).to.be.a(\"string\");",
									" });",
									"",
									" pm.test(\"Return list contains only LL documents\", () => {",
									"     pm.expect(jsonData.type).to.be.eql(\"LL\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/ll/sct/4/associated",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"ll",
								"sct",
								"4",
								"associated"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs ll Sct {Category} Init",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content-type header test\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"html\");",
									"});",
									"",
									"const $ = cheerio.load(pm.response.text());",
									"const $embed = $(\"embed\");",
									"const srcType = $embed.attr('src');",
									"const llInitDoc = $embed.attr(\"type\");",
									"pm.test(\"Response uri type test\", () => {",
									"    pm.expect(srcType).to.be.a(\"string\");",
									"    pm.expect(llInitDoc).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/ll/sct/4/init",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"ll",
								"sct",
								"4",
								"init"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Document Download Controller",
			"item": [
				{
					"name": "Techdocs Download Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response returns type zip\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"zip\");",
									"});",
									"",
									"pm.test(\"Response zip file returned\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\"zip\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/files?files=5a2af1d58746cb1f1e0286bb&type=cmm",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"files"
							],
							"query": [
								{
									"key": "files",
									"value": "5a2af1d58746cb1f1e0286bb"
								},
								{
									"key": "type",
									"value": "cmm"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download Pgms Mods {Model} Csv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response returns type csv\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"csv\");",
									"});",
									"",
									"pm.test(\"Response returns a csv file\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".csv\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/pgms/mods/CF34-8E/csv?type=cmm",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"pgms",
								"mods",
								"CF34-8E",
								"csv"
							],
							"query": [
								{
									"key": "type",
									"value": "cmm"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download Pgms Mods {Model}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].id).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].type).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].resourceUri).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].groupName).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].releaseDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].model).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].publication).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].program).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programdocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programtitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].multibrowser).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/pgms/mods/CF6-50?type=cmm&iDisplayLength=20&iDisplayStart=0&sEcho=sEcho",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"pgms",
								"mods",
								"CF6-50"
							],
							"query": [
								{
									"key": "type",
									"value": "cmm"
								},
								{
									"key": "iDisplayLength",
									"value": "20"
								},
								{
									"key": "iDisplayStart",
									"value": "0"
								},
								{
									"key": "sEcho",
									"value": "sEcho"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download Pgms Fams {Family} {Doctype} Vi",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/pgms/fams/CF6/ServiceBulletin/vi",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"pgms",
								"fams",
								"CF6",
								"ServiceBulletin",
								"vi"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download Pgms Mods {Model} {Category} Tp Csv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response returns type csv\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"csv\");",
									"});",
									"",
									"pm.test(\"Response returns a csv file\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".csv\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/pgms/mods/CF34-8E/2/tp/csv",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"pgms",
								"mods",
								"CF34-8E",
								"2",
								"tp",
								"csv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download Pgms Mods {Model} {Category} Tp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].id).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].resourceUri).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].groupName).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].fileType).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].uploadMonthName).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].uploadYearNumber).to.be.a(\"number\");",
									"  pm.expect(jsonData.objects[0].releaseDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].conferenceLocation).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].printable).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].multibrowser).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/pgms/mods/CF34-8E/2/tp?iDisplayStart=0&iDisplayLength=20&sEcho=sEcho",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"pgms",
								"mods",
								"CF34-8E",
								"2",
								"tp"
							],
							"query": [
								{
									"key": "iDisplayStart",
									"value": "0"
								},
								{
									"key": "iDisplayLength",
									"value": "20"
								},
								{
									"key": "sEcho",
									"value": "sEcho"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download Pgms Mods {Model} {DocType} Sm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].id).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].resourceUri).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].releaseDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].multibrowser).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/pgms/mods/CF34-8E/Field%20Debris%20Guide/sm?iDisplayStart=0&iDisplayLength=20&sEcho=sEcho",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"pgms",
								"mods",
								"CF34-8E",
								"Field%20Debris%20Guide",
								"sm"
							],
							"query": [
								{
									"key": "iDisplayStart",
									"value": "0"
								},
								{
									"key": "iDisplayLength",
									"value": "20"
								},
								{
									"key": "sEcho",
									"value": "sEcho"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download {Category} Ll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].id).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].resourceUri).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].groupName).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].fileType).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].uploadMonthName).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].uploadYearNumber).to.be.a(\"number\");",
									"  pm.expect(jsonData.objects[0].releaseDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].conferenceLocation).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].printable).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].multibrowser).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/2/ll?iDisplayStart=0&iDisplayLength=20&sEcho=sEcho",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"2",
								"ll"
							],
							"query": [
								{
									"key": "iDisplayStart",
									"value": "0"
								},
								{
									"key": "iDisplayLength",
									"value": "20"
								},
								{
									"key": "sEcho",
									"value": "sEcho"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download Pgms Mods {Model} {DocType} Sm Csv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response returns type csv\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"csv\");",
									"});",
									"",
									"pm.test(\"Response returns a csv file\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".csv\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/pgms/mods/CF34-8E/Field%20Debris%20Guide/sm/csv",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"pgms",
								"mods",
								"CF34-8E",
								"Field%20Debris%20Guide",
								"sm",
								"csv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download Pgms {Program} {DownloadType} {Type}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects).to.be.an(\"array\");",
									"  pm.expect(jsonData.objects[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.objects[0].id).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].type).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].groupName).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].fileSize).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].toctitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].revisionDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].fileType).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].downloadtype).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].catalogkey).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].releaseDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].printable).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.objects[0].multibrowser).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].program).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programdocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].programtitle).to.be.a(\"string\");",
									"  pm.expect(jsonData.objects[0].downloadfilename).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/pgms/gek108745/source/manual?program=gek108745&manual=gek28495-2&iDisplayLength=20&iDisplayStart=0&iColumns=6&sEcho=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"pgms",
								"gek108745",
								"source",
								"manual"
							],
							"query": [
								{
									"key": "program",
									"value": "gek108745"
								},
								{
									"key": "manual",
									"value": "gek28495-2"
								},
								{
									"key": "iDisplayLength",
									"value": "20"
								},
								{
									"key": "iDisplayStart",
									"value": "0"
								},
								{
									"key": "iColumns",
									"value": "6"
								},
								{
									"key": "sEcho",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download Pgms {Program} {DownloadType} {Type} Csv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response returns type csv\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"csv\");",
									"});",
									"",
									"pm.test(\"Response returns a csv file\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".csv\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/pgms/gek108745/source/manual/csv?revision=Current&manual=gek50481&program=gek108745",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"pgms",
								"gek108745",
								"source",
								"manual",
								"csv"
							],
							"query": [
								{
									"key": "revision",
									"value": "Current"
								},
								{
									"key": "manual",
									"value": "gek50481"
								},
								{
									"key": "program",
									"value": "gek108745"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download Pgms {Program} {DownloadType} {Type} File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response zip file returned\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\"zip\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/v2/techdocs/download/pgms/gek108745/source/manual/files?files=gek50481%3ACF6-50_ESM_90_SGML_001.zip&type=manual",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"v2",
								"techdocs",
								"download",
								"pgms",
								"gek108745",
								"source",
								"manual",
								"files"
							],
							"query": [
								{
									"key": "files",
									"value": "gek50481%3ACF6-50_ESM_90_SGML_001.zip"
								},
								{
									"key": "type",
									"value": "manual"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download {Category} Ll Csv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response csv file returned\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".csv\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/2/ll/csv",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"2",
								"ll",
								"csv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Manual Download Pgms {Program} {DownloadType} {Type}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"array\");",
									"  pm.expect(jsonData[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData[0].manualdocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].multibrowser).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].printable).to.be.a(\"boolean\");",
									"  pm.expect(jsonData[0].programdocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].programtitle).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/manual/download/pgms/gek108745/source/manual",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"manual",
								"download",
								"pgms",
								"gek108745",
								"source",
								"manual"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download Pgms {Program} Offlineviewer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"  pm.expect(jsonData.dvdList).to.be.an(\"array\");",
									"  pm.expect(jsonData.dvdList[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.dvdList[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.dvdList[0].releaseDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.dvdList[0].geknumber).to.be.a(\"string\");",
									"  pm.expect(jsonData.dvdList[0].filesize).to.be.a(\"string\");",
									"  pm.expect(jsonData.dvdList[0].type).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/pgms/gek108745/offlineviewer?iDisplayLength=20&iDisplayStart=0&sEcho=2&iColumns=6&manual=gek50481&revision=All&currentorg=geae",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"pgms",
								"gek108745",
								"offlineviewer"
							],
							"query": [
								{
									"key": "iDisplayLength",
									"value": "20"
								},
								{
									"key": "iDisplayStart",
									"value": "0"
								},
								{
									"key": "sEcho",
									"value": "2"
								},
								{
									"key": "iColumns",
									"value": "6"
								},
								{
									"key": "manual",
									"value": "gek50481"
								},
								{
									"key": "revision",
									"value": "All"
								},
								{
									"key": "currentorg",
									"value": "geae"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Cloudfront {Program}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"array\");",
									"  pm.expect(jsonData[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData[0].manualdocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].multibrowser).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].printable).to.be.a(\"boolean\");",
									"  pm.expect(jsonData[0].programdocnbr).to.be.a(\"string\");",
									"  pm.expect(jsonData[0].programtitle).to.be.a(\"string\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/manual/download/pgms/gek108745/source/manual",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"manual",
								"download",
								"pgms",
								"gek108745",
								"source",
								"manual"
							]
						}
					},
					"response": []
				},
				{
					"name": "Techdocs Download Pgm Excel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response returns an Excel file\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Disposition\")).to.contain(\".xlsx\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facetQueries\": [\n        {\n            \"name\": \"doc_type\",\n            \"values\": [\n                \"Tool And Equipment Manual\",\n                \"Manual\"\n            ]\n        },\n        {\n            \"name\": \"engineModels\",\n            \"values\": [\n                \"CF6-50\"\n            ]\n        },\n        {\n            \"name\": \"engineFamilies\",\n            \"values\": [\n                \"CF6\"\n            ]\n        }\n    ],\n    \"limit\": 20,\n    \"module\": \"documents\",\n    \"start\": 0,\n    \"searchText\": \"*\",\n    \"sortField\": {\n        \"field\": \"title\",\n        \"order\": \"ASC\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/services/techpubs/techdocs/download/pgms/excel",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"techdocs",
								"download",
								"pgms",
								"excel"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Archival Controller",
			"item": [
				{
					"name": "Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test that a user with access retrieves document metadata\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.company).to.be.a(\"string\");",
									"  pm.expect(jsonData.documents).to.be.an(\"array\");",
									"  pm.expect(jsonData.documents.length).to.be.above(0);",
									"  pm.expect(jsonData.documents[0]).to.be.an(\"object\");",
									"  pm.expect(jsonData.documents[0].id).to.be.a(\"string\");",
									"  pm.expect(jsonData.documents[0].type).to.be.a(\"string\");",
									"  pm.expect(jsonData.documents[0].title).to.be.a(\"string\");",
									"  pm.expect(jsonData.documents[0].effectiveDate).to.be.a(\"string\");",
									"  pm.expect(jsonData.documents[0].issueNumber).to.be.a(\"string\");",
									"  pm.expect(jsonData.documents[0].filePath).to.be.a(\"string\");",
									"  pm.expect(jsonData.documents[0].fileName).to.be.a(\"string\");",
									"  pm.expect(jsonData.documents[0].engineModels).to.be.an(\"array\");",
									"  pm.expect(jsonData.documents[0].engineModels[0].family).to.be.a(\"string\");",
									"  pm.expect(jsonData.documents[0].engineModels[0].model).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Test metadata is not null or undefined\", () => {",
									"    pm.expect(jsonData.documents[0].id).to.not.equal(null || undefined);",
									"    pm.expect(jsonData.documents[0].type).to.not.equal(null || undefined);",
									"    pm.expect(jsonData.documents[0].title).to.not.equal(null || undefined);",
									"    pm.expect(jsonData.documents[0].effectiveDate).to.not.equal(null || undefined);",
									"    pm.expect(jsonData.documents[0].issueNumber).to.not.equal(null || undefined);",
									"    pm.expect(jsonData.documents[0].filePath).to.not.equal(null || undefined);",
									"    pm.expect(jsonData.documents[0].fileName).to.not.equal(null || undefined);",
									"    pm.expect(jsonData.documents[0].engineModels[0].family).to.not.equal(null || undefined);",
									"    pm.expect(jsonData.documents[0].engineModels[0].model).to.not.equal(null || undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/archival/documents",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"archival",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test that a user has access to archival documents\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.hasAccess).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/archival/access",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"archival",
								"access"
							]
						}
					},
					"response": []
				},
				{
					"name": "Archival model type pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content is a pdf\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"pdf\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/archival/model/CJ610-1/type/Service Bulletins/pdf/SBCJA73-34.pdf",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"archival",
								"model",
								"CJ610-1",
								"type",
								"Service Bulletins",
								"pdf",
								"SBCJA73-34.pdf"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Entitlement Controller",
			"item": [
				{
					"name": "Entitlements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204])",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    const entitlementArr = jsonData.entitlementList",
									"    pm.test(\"Test data type of the response\", () => {",
									"        pm.expect(entitlementArr).to.be.an(\"array\");",
									"        pm.expect(entitlementArr.length).to.be.greaterThan(0);",
									"        pm.expect(entitlementArr[0].airframe).to.be.a(\"string\")",
									"        pm.expect(entitlementArr[0].associatedDocumentTypes).to.be.an(\"array\")",
									"        pm.expect(entitlementArr[0].entitlementStatus).to.be.a(\"string\")",
									"        pm.expect(entitlementArr[0].startDate).to.be.a(\"string\")",
									"        if (entitlementArr[0].endDate) {",
									"            pm.expect(entitlementArr[0].endDate).to.be.a(\"string\")",
									"        } else {",
									"            pm.expect(entitlementArr[0].endDate).to.be.null}",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "text"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/entitlements",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"entitlements"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search Controller",
			"item": [
				{
					"name": "Search - Initial Load",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204])\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    const hits = jsonData.hits\r",
									"    pm.test(\"Test data type of the response\", () => {\r",
									"        pm.expect(hits.hits).to.be.an(\"array\")\r",
									"        pm.expect(hits.hits).to.not.be.null\r",
									"    });\r",
									"\r",
									"    // NOTE: this collection variable is used by the AvSystem Document Controller\r",
									"    pm.collectionVariables.set(\"avsys-doc-s3-key\", jsonData.hits.hits[0]._source.s3_key);\r",
									"    pm.collectionVariables.set(\"avsys-doc-id-from-search\", jsonData.hits.hits[0]._source.document_id);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "default"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"index\": \"av-cp-techpubs-avsystem\",\r\n    \"body\": {\r\n        \"from\": 0,\r\n        \"size\": 10,\r\n        \"sort\": [\r\n            {\r\n                \"revision_date\": {\r\n                    \"order\": \"desc\"\r\n                }\r\n            }\r\n        ],\r\n        \"_source\": {\r\n            \"exclude\": [\r\n                \"content\"\r\n            ]\r\n        },\r\n        \"docvalue_fields\": [\r\n            {\r\n                \"field\": \"revision_date\",\r\n                \"format\": \"date\"\r\n            }\r\n        ],\r\n        \"query\": {\r\n            \"bool\": {\r\n                \"must\": [],\r\n                \"filter\": [],\r\n                \"should\": [],\r\n                \"must_not\": []\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/services/techpubs/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"search"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AvSystem Document Controller",
			"item": [
				{
					"name": "Get PDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "default"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/avsystem/{{avsys-doc-s3-key}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"avsystem",
								"{{avsys-doc-s3-key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search - Excel Export",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200])\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "sm_ssoid",
								"value": "{{sm_ssoid}}",
								"type": "default"
							},
							{
								"key": "portal_id",
								"value": "{{portal_id}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"index\": \"av-cp-techpubs-avsystem\",\r\n    \"body\": {\r\n        \"from\": 0,\r\n        \"size\": 1867,\r\n        \"sort\": [\r\n            {\r\n                \"revision_date\": {\r\n                    \"order\": \"desc\"\r\n                }\r\n            }\r\n        ],\r\n        \"_source\": {\r\n            \"exclude\": [\r\n                \"content\"\r\n            ]\r\n        },\r\n        \"docvalue_fields\": [\r\n            {\r\n                \"field\": \"revision_date\",\r\n                \"format\": \"date\"\r\n            }\r\n        ],\r\n        \"query\": {\r\n            \"bool\": {\r\n                \"must\": [],\r\n                \"filter\": [],\r\n                \"should\": [],\r\n                \"must_not\": []\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/services/techpubs/avsystem/excel-export",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"avsystem",
								"excel-export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Entitled-Airframes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () { ",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									"",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data type of the response\", () => {",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Test response array objects have correct object keys\", () => {",
									"    for (const val of jsonData) {",
									"        pm.expect(val.hasOwnProperty(\"id\")).to.be.true;",
									"        pm.expect(val.hasOwnProperty(\"airframe\")).to.be.true;",
									"    }",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "sm_ssoid",
								"type": "text",
								"value": "{{sm_ssoid}}"
							},
							{
								"key": "portal_id",
								"type": "text",
								"value": "{{portal_id}}"
							}
						],
						"url": {
							"raw": "{{host}}/services/techpubs/avsystem/entitled-airframes",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"avsystem",
								"entitled-airframes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_PDF_S3_ById",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/services/techpubs/avsystem/{{avsys-doc-id-from-search}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"techpubs",
								"avsystem",
								"{{avsys-doc-id-from-search}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "reach_document_id",
			"value": ""
		},
		{
			"key": "avsys-doc-s3-key",
			"value": ""
		},
		{
			"key": "reach_added_document_id",
			"value": ""
		},
		{
			"key": "systemDocumentId",
			"value": ""
		},
		{
			"key": "documentTypeId",
			"value": ""
		},
		{
			"key": "documentSiteId",
			"value": ""
		},
		{
			"key": "documentNumber",
			"value": ""
		},
		{
			"key": "added_system_document_id",
			"value": ""
		},
		{
			"key": "avsys-doc-id-from-search",
			"value": ""
		}
	]
}